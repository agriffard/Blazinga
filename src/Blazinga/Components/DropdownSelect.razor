@using System.Linq.Expressions
@typeparam TItem
@typeparam TValue

<div class="@CssClass" style="position: relative;">
    <div class="d-flex align-items-center" style="cursor:pointer" tabindex="0">
        <span class="flex-grow-1" @onclick="ToggleDropdown">
            @* <span class="float-end">
                <span class="dropdown-toggle"></span>
            </span> *@
            @if (SelectedItem != null)
            {
                @TextSelector.Compile().Invoke(SelectedItem)
            }
            else
            {
                <span class="text-muted">@Placeholder</span>
            }
        </span>
        @if (Value != null)
        {
            <span class="ms-2">
                <button type="button" class="btn btn-close btn-sm" @onclick="ResetValue"></button>
            </span>
        }
    </div>
    @if (IsDropdownVisible)
    {
        <div class="">
            @if (AllowSearch)
            {
                <input type="search" class="form-control mb-1" placeholder="@SearchPlaceholder" value="@SearchText" @oninput="OnSearchTextInput" />
            }
            <div class="list-group overflow-auto" style="max-height: @(Height)px">
                @if (FilteredItems.Any())
                {
                    @foreach (var item in FilteredItems)
                    {
                        <a class="@ItemCssClass list-group-item list-group-item-action" style="cursor:pointer" @onclick="() => SelectItem(item)" tabindex="0">
                            @TextSelector.Compile().Invoke(item)
                        </a>
                    }
                }
                else
                {
                    <span class="@ItemCssClass list-group-item list-group-item-action text-muted">@NoResultsText</span>
                }
            </div>
        </div>
    }
</div>
