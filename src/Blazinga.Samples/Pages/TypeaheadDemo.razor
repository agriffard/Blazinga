@page "/typeaheadDemo"

<PageTitle>TypeAhead</PageTitle>
<SectionContent SectionName="top-header">
    TypeAhead
</SectionContent>

<div class="row">
    <div class="col-md-6">
        <label>Customer</label>
        <Typeahead TItem="CustomerModel"
           SearchFunction="SearchCustomersAsync"
           ItemSelector="customer => customer.Name"
           Placeholder="Search for a customer..."
           SelectedChanged="OnCustomerSelected" />
    </div>
    <div class="col-md-6">
        <label>Selected customer</label>
        <span class="form-control-plaintext">
            @if (selectedProduct != null)
            {
                <span>@selectedProduct.Name</span>
            }
        </span>
    </div>
</div>

@code {
    private CustomerModel? selectedProduct = new();
    private List<CustomerModel> customers = new List<CustomerModel>();

    protected override void OnInitialized()
    {
        customers = new List<CustomerModel>
        {
            new CustomerModel { Id = 1, Name = "John Doe" },
            new CustomerModel { Id = 2, Name = "Jane Smith" },
            new CustomerModel { Id = 3, Name = "Alice Johnson" },
            new CustomerModel { Id = 4, Name = "Bob Brown" },
            new CustomerModel { Id = 5, Name = "Charlie Black" }
        };
    }

    private void OnCustomerSelected(CustomerModel? selected)
    {
        selectedProduct = selected;
    }

    private async Task<List<CustomerModel>> SearchCustomersAsync(string searchText) //, CancellationToken cancellationToken)
    {
        if (string.IsNullOrEmpty(searchText))
        {
            return customers;
        }
        var result = new List<CustomerModel>();
        result = customers.Where(x => x.Name.Contains(searchText, StringComparison.InvariantCultureIgnoreCase)).ToList();

        return await Task.FromResult(result);
    }
}

