@page "/typeaheadDemo"

<PageTitle>Typeahead</PageTitle>
<SectionContent SectionName="top-header">
    Typeahead
</SectionContent>

<div class="row">
    <div class="col-md-6">
        <label>Customer</label>
        <Typeahead TItem="CustomerModel"
                   ItemSelector="customer => customer.Name"
                   MultiSelect="true"
                   Placeholder="Search for a customer..."
                   SearchFunction="SearchCustomersAsync"
                   SelectedChanged="OnCustomerSelected">
            <ItemTemplate Context="customer">
                <div>
                    <strong>@customer.Name</strong> <small>(@customer.Id)</small>
                </div>
            </ItemTemplate>
        </Typeahead>
    </div>
    <div class="col-md-6">
        <label>Selected customers</label>
        @if (selectedCustomers != null && selectedCustomers.Any())
        {
            <ul>
                @foreach (var customer in selectedCustomers)
                {
                    <li>@customer.Name</li>
                }
            </ul>
        }
        else
        {
            <span class="form-control-plaintext">
                <span class="text-muted">No customers selected.</span>
            </span>
        }
    </div>
</div>

@code {
    private List<CustomerModel>? selectedCustomers = new();

    private List<CustomerModel> getCustomers()
    {
        var result = new List<CustomerModel>
        {
            new CustomerModel { Id = 1, Name = "John Doe" },
            new CustomerModel { Id = 2, Name = "Jane Smith" },
            new CustomerModel { Id = 3, Name = "Alice Johnson" },
            new CustomerModel { Id = 4, Name = "Bob Brown" },
            new CustomerModel { Id = 5, Name = "Charlie Black" }
        };

        return result;
    }

    private void OnCustomerSelected(List<CustomerModel>? selected)
    {
        selectedCustomers = selected;
    }

    private async Task<List<CustomerModel>> SearchCustomersAsync(string searchText)
    {
        var customers = getCustomers();
        if (string.IsNullOrEmpty(searchText))
        {
            return getCustomers();
        }
        var result = new List<CustomerModel>();
        result = customers.Where(x => x.Name.Contains(searchText, StringComparison.InvariantCultureIgnoreCase)).ToList();

        return await Task.FromResult(result);
    }
}
